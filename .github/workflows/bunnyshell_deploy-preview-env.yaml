name: Bunnyshell - Deploy Preview Environment
on:
  workflow_run:
    workflows:
      - "Bunnyshell - Prepare Preview Environment Configuration"
    types:
      - completed
permissions:
  pull-requests: write
jobs:
  load-artifact-from-reusable:
    name: Load artifact values
    uses: bunnyshell/workflows/.github/workflows/load-artifact.yaml@v2
    with:
      workflow_run_id: ${{ github.event.workflow_run.id }}

  deploy:
    name: Deploy Environment
    needs: load-artifact-from-reusable
    uses: bunnyshell/workflows/.github/workflows/deploy-env.yaml@v2
    concurrency: bns-deploy-${{ needs.load-artifact-from-reusable.outputs.pr-number }}
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.load-artifact-from-reusable.outputs.skip-deployment == 'false' }}
    with:
      pr-number: ${{ needs.load-artifact-from-reusable.outputs.pr-number }}
      project-id: ${{ vars.BUNNYSHELL_PROJECT_ID }}
      cluster-id: ${{ vars.BUNNYSHELL_CLUSTER_ID }}
      env-name: "Demo PR #${{ needs.load-artifact-from-reusable.outputs.pr-number }}"
      bunnyshell-yaml-contents: "kind: Environment\nname: preview\ntype: primary\nurlHandle: jvav\ncomponents:\n    -\n        kind: Database\n        name: db-exporter\n        dockerCompose:\n            environment:\n                MONGODB_URI: 'mongodb://josvoogt21:password@mongodb:27017'\n            image: 'bitnami/mongodb-exporter:latest'\n    -\n        kind: Application\n        name: grafana\n        gitRepo: 'https://github.com/JoV00gt/DevOps.git'\n        gitBranch: main\n        gitApplicationPath: grafana\n        dockerCompose:\n            build:\n                context: ./grafana\n                dockerfile: Dockerfile\n            ports:\n                - '3000:3000'\n        hosts:\n            -\n                hostname: 'grafana-{{ env.base_domain }}'\n                path: /\n                servicePort: 3000\n    -\n        kind: Service\n        name: messagebroker\n        dockerCompose:\n            image: 'rabbitmq:3-management'\n            ports:\n                - '5672:5672'\n                - '15672:15672'\n            restart: always\n        hosts:\n            -\n                hostname: 'messagebroker-{{ env.base_domain }}'\n                path: /\n                servicePort: 5672\n    -\n        kind: Database\n        name: mongodb\n        dockerCompose:\n            environment:\n                MONGO_INITDB_ROOT_PASSWORD: password\n                MONGO_INITDB_ROOT_USERNAME: josvoogt21\n            image: 'mongo:latest'\n            ports:\n                - '27017:27017'\n            restart: always\n    -\n        kind: Application\n        name: myapp\n        gitRepo: 'https://github.com/JoV00gt/DevOps.git'\n        gitBranch: main\n        gitApplicationPath: myapp\n        dockerCompose:\n            build:\n                context: ./myapp\n                dockerfile: Dockerfile\n            command:\n                - npm\n                - run\n                - dev\n            environment:\n                DB_NAME: myapp\n                MESSAGEBROKER: 'amqp://messagebroker:5672'\n                MONGO_URL: 'mongodb://josvoogt21:password@mongodb:27017'\n                PORT: '5000'\n            ports:\n                - '12345:5000'\n        hosts:\n            -\n                hostname: 'myapp-{{ env.base_domain }}'\n                path: /\n                servicePort: 12345\n    -\n        kind: Application\n        name: mysecondapp\n        gitRepo: 'https://github.com/JoV00gt/DevOps.git'\n        gitBranch: main\n        gitApplicationPath: mysecondapp\n        dockerCompose:\n            build:\n                context: ./mysecondapp\n                dockerfile: Dockerfile\n            command:\n                - npm\n                - run\n                - dev\n            environment:\n                DB_NAME: mysecondapp\n                MESSAGEBROKER: 'amqp://messagebroker:5672'\n                MONGO_URL: 'mongodb://josvoogt21:password@mongodb:27017'\n                PORT: '5001'\n            ports:\n                - '12346:5001'\n        hosts:\n            -\n                hostname: 'mysecondapp-{{ env.base_domain }}'\n                path: /\n                servicePort: 12346\n    -\n        kind: Service\n        name: prometheus\n        dockerCompose:\n            command:\n                - '--web.enable-lifecycle'\n                - '--config.file=/etc/prometheus/prometheus.yml'\n            image: 'prom/prometheus:latest'\n            ports:\n                - '9090:9090'\n        hosts:\n            -\n                hostname: 'prometheus-{{ env.base_domain }}'\n                path: /\n                servicePort: 9090\n        volumes:\n            -\n                name: prometheus-data\n                mount: /prometheus\n                subPath: ''\nvolumes:\n    -\n        name: prometheus-data\n        size: 1Gi\n        type: disk\n"
      comment-on-pr: true
    secrets:
      bunnyshell-access-token: ${{ secrets.BUNNYSHELL_ACCESS_TOKEN }}